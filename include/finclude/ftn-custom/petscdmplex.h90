
#if !defined(PETSC_USE_FORTRAN_MODULES)
#include "finclude/ftn-custom/petscdmplexdef.h90"
#endif

#include "finclude/ftn-custom/petscdmhide.h90"

#if defined(PETSC_USE_FORTRAN_DATATYPES) && !defined(USE_DMPLEX_HIDE)
#  define USE_DMPLEX_HIDE use petscdmplexdef
#elif !defined(USE_DMPLEX_HIDE)
#  define USE_DMPLEX_HIDE
#endif

      Interface
        Subroutine DMPlexGetCone(m,p,cone,ierr)
          USE_DMPLEX_HIDE
          PetscInt     p
          PetscInt, pointer :: cone(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexRestoreCone(m,p,cone,ierr)
          USE_DMPLEX_HIDE
          PetscInt     p
          PetscInt, pointer :: cone(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexGetConeOrientation(m,p,coneOrient,ierr)
          USE_DMPLEX_HIDE
          PetscInt     p
          PetscInt, pointer :: coneOrient(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexGetSupport(m,p,support,ierr)
          USE_DMPLEX_HIDE
          PetscInt     p
          PetscInt, pointer :: support(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexRestoreSupport(m,p,support,ierr)
          USE_DMPLEX_HIDE
          PetscInt     p
          PetscInt, pointer :: support(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexGetTransitiveClosure(m,p,useCone,points,ierr)
          USE_DMPLEX_HIDE
          PetscInt     p
          PetscBool    useCone
          PetscInt, pointer :: points(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexRestoreTransitiveClosure(m,p,useCone,points,   &
     &  ierr)
          USE_DMPLEX_HIDE
          PetscInt     p
          PetscBool    useCone
          PetscInt, pointer :: points(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexGetJoin(m,numPoints,points,join,ierr)
          USE_DMPLEX_HIDE
          PetscInt     numPoints
          PetscInt, pointer :: points(:)
          PetscInt, pointer :: join(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexGetFullJoin(m,numPoints,points,join,ierr)
          USE_DMPLEX_HIDE
          PetscInt     numPoints
          PetscInt, pointer :: points(:)
          PetscInt, pointer :: join(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexRestoreJoin(m,numPoints,points,join,ierr)
          USE_DMPLEX_HIDE
          PetscInt     numPoints
          PetscInt, pointer :: points(:)
          PetscInt, pointer :: join(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexGetMeet(m,numPoints,points,meet,ierr)
          USE_DMPLEX_HIDE
          PetscInt     numPoints
          PetscInt, pointer :: points(:)
          PetscInt, pointer :: meet(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexGetFullMeet(m,numPoints,points,meet,ierr)
          USE_DMPLEX_HIDE
          PetscInt     numPoints
          PetscInt, pointer :: points(:)
          PetscInt, pointer :: meet(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexRestoreMeet(m,numPoints,points,meet,ierr)
          USE_DMPLEX_HIDE
          PetscInt     numPoints
          PetscInt, pointer :: points(:)
          PetscInt, pointer :: meet(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexVecGetClosure(m,section,v,point,values,ierr)
          USE_DMPLEX_HIDE
          PETSCSECTION_HIDE section
          VEC_HIDE     v
          PetscInt     point
          PetscScalar, pointer :: values(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexVecRestoreClosure(m,section,v,point,values,    &
     &  ierr)
          USE_DMPLEX_HIDE
          PETSCSECTION_HIDE section
          VEC_HIDE     v
          PetscInt     point
          PetscScalar, pointer :: values(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexVecSetClosure(m,section,v,point,values,mode,   &
     &  ierr)
          USE_DMPLEX_HIDE
          PETSCSECTION_HIDE section
          VEC_HIDE     v
          PetscInt     point
          InsertMode   mode
          PetscScalar, pointer :: values(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexMatSetClosure(m,section,globalSection,A,point, &
     &  values,mode,ierr)
          USE_DMPLEX_HIDE
          PETSCSECTION_HIDE section
          PETSCSECTION_HIDE globalSection
          MAT_HIDE     A
          PetscInt     point
          InsertMode   mode
          PetscScalar, pointer :: values(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexCreateSection(m,dim,numFields,numComp,         &
     &  numDof,numBC,bcField,bcPoints,section,ierr)
          USE_DMPLEX_HIDE
          PETSCSECTION_HIDE section
          PetscInt     dim, numFields, numBC
          PetscInt, pointer :: numComp(:)
          PetscInt, pointer :: numDof(:)
          PetscInt, pointer :: bcField(:)
          IS_HIDE,  pointer :: bcPoints(:)
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface

      Interface
        Subroutine DMPlexComputeCellGeometry(m,cell,v0,J,invJ,detJ,ierr)
          USE_DMPLEX_HIDE
          PetscInt   cell
          PetscReal, pointer :: v0(:)
          PetscReal, pointer :: J(:)
          PetscReal, pointer :: invJ(:)
          PetscReal  detJ
          PetscErrorCode ierr
          DM_HIDE m
        End Subroutine
      End Interface
